Dev cycle 1:
The first job was to decide on what the application will do, what API I will implement and how will
I meet all the requirements
within the application which was chosen.
I decided on using the Dublin Bikes API.

Dev Cycle 2:
The objective of this coding session was to create the Activities which will be required for the
application. An activity is needed for the user to login/register, an activity to use a native
feature such as a camera(a user profile screen), an activity to display API information on a list
view and an activity for displaying API information on a map(second native feature).
Activities created:
Main Activity,
Profile Activity,
List Activity,
Maps Activity.

Dev Cycle 3:
The objective of this session was to create the ability for the user to register/login. I researched
how to do it from scratch but decided that the best way to add this feature would be to
familiarise myself adding external tools to an Android project. Google Firebase is the chosen tool.
I read the documentation on https://firebase.google.com/docs/auth/ and added the dependencies to my
project. I was shocked at how quickly and effortlessly the tool was added to my project and that the
information was being stored on my firebase console on https://firebase.google.com/.

Dev Cycle 4:
I created a simple profile layout on the profile activity(Photo,location description and 'About Me')
and read the android docs on how to implement usage of the camera native feature and store the image
in an ImageView https://developer.android.com/training/camera/photobasics.html.

Dev Cycle 5:
I registered on https://developer.jcdecaux.com/ for an API key for Dublin Bikes. Once I received the
API key, I familiarised myself with the Json data and created the class 'Station' to get the
required Json Objects and implement, I created a HTTP request and de-serialized the Json  data into
object fields. Once my json data was to string, I passed it to ParseJson and created a Json object
from the string that was passed into it and added it to the array adapter. I was having a lot of
difficulty passing the station information into the list view and how I would access it that pulled
information in the Maps activity also. I came across a 'RecyclerView' which appeared to be exactly
what I wanted. I wrote the json information to file as 'stationArrayList.json' into 'Utilities' and
created an adapter for my recycler view called 'StationAdapter' and create an empty station item in
the view holder.

Dev Cycle 6:
I called the same Json information into the Map activity with ParseJsonResponse method and added
markers for the positions on the map which are determines by lat and lng from the API. I then began
to style the app by adding a colour scheme and fixing the layout of the activities.

Dev Cycle 7:
App styled using the styles.xml with a colour scheme I resourced online. I also did not like the
messy appearance of my list view, so I researched and attempted to use the google cards appearance
for each station in the list view.
(https://developer.android.com/training/material/lists-cards.html#CardView).